apply plugin: 'java'
apply plugin: 'eclipse'
	
sourceCompatibility = '1.6'
targetCompatibility = '1.6'
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

File buildDir = file(".");

Properties props = new Properties()
props.load(new FileInputStream(buildDir.getAbsolutePath()+"/src/main/resources/com/neuronrobotics/sdk/config/build.properties"))
sourceSets {
	
	test {
		java {
			srcDirs = ["test/java/src"]  // Note @Peter's comment below
		}
	}
}
manifest {
    attributes(	
    			"Manifest-Version": "1.0",
    			"Created-By": "Neuron Robotics Cooperative",
    			"Specification-Title": props."app.name",
    			"Specification-Version": props."app.version",
    			"Specification-Vendor": "Neuron Robotics Cooperative",,
    			"Implementation-Title": props."app.name",
    			"Implementation-Version" : props."app.version",
    			"Implementation-Vendor": "Neuron Robotics Cooperative"
        		
    )
}

jar.archiveName = "nrsdk-"+props."app.version"+"-jar-with-dependencies.jar"

//apply from: 'http://gradle-plugins.mihosoft.eu/latest/vlicenseheader.gradle'
//repairHeaders.licenseHeaderText = new File(projectDir,'./license-template.txt')

task wrapper(type: Wrapper, description: 'Creates and deploys the Gradle wrapper to the current directory.') {
    gradleVersion = '2.1'
}

repositories {
    mavenCentral()
    maven {
        url "https://jcenter.bintray.com"
    }
}
	
dependencies {
	//TODO change as many of these as possible to Maven repositories
    compile fileTree (dir: 'libs', includes: ['*.jar'])
	testCompile "junit:junit:4.11"  // Or whatever version
}

// create a fat-jar (class files plus dependencies
// excludes VRL.jar (plugin jar files must not start with 'vrl-\\d+')
jar {
	
	// remove the security files (from mail.jar / activation.jar) so that the jar will be executable.
	
	doFirst { 
	    // dependencies except VRL
	    from (configurations.runtime.asFileTree.
	        filter({file->return !file.name.startsWith("vrl-0")}).
	        files.collect { zipTree(it) } ){
	    	exclude 'META-INF/MANIFEST.MF'
			exclude 'META-INF/*.SF'
			exclude 'META-INF/*.DSA'
			exclude 'META-INF/*.RSA'
	    }
	}
	
    // project class files compiled from source
    from files(sourceSets.main.output.classesDir)

}
